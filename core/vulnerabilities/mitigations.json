{ 
    "CWE-121": { 
        "description": "栈缓冲区溢出（Stack - Based Buffer Overflow）是一种严重的软件漏洞，当程序向栈上的缓冲区写入数据时，写入的数据量超过了该缓冲区的边界，就会覆盖相邻的内存区域。这可能导致程序崩溃、执行任意代码、泄露敏感信息等严重后果，攻击者可以利用该漏洞来控制程序的执行流程，从而达到恶意目的。", 
        "impact": [ 
            "程序崩溃：缓冲区溢出可能会破坏程序的栈结构，导致程序无法正常运行而崩溃。", 
            "执行任意代码：攻击者可以精心构造输入数据，覆盖返回地址或函数指针，使程序跳转到攻击者指定的代码位置执行恶意代码。", 
            "信息泄露：溢出的数据可能会覆盖或泄露栈上存储的敏感信息，如密码、密钥等。" 
        ], 
        "solution": [ 
            "使用带长度检查的函数如strncpy：在进行字符串复制操作时，使用strncpy代替strcpy，确保复制的字符数量不会超过目标缓冲区的大小。", 
            "使用安全的字符串处理函数：例如snprintf代替sprintf，避免格式化字符串漏洞。", 
            "手动进行边界检查：在向缓冲区写入数据之前，检查输入数据的长度是否超过缓冲区的容量。", 
            "动态分配内存：如果无法确定输入数据的长度，可以使用动态内存分配函数（如malloc）来分配足够的内存空间。" 
        ], 
        "compiler_flags": [ 
            "-fstack-protector-strong：启用栈保护机制，在函数栈帧中插入金丝雀值（canary），当栈被破坏时会触发异常。", 
            "-D_FORTIFY_SOURCE=2：启用GCC的源强化功能，对一些常见的不安全函数调用进行检查。", 
            "-Wformat -Wformat -security：开启格式化字符串检查，帮助发现潜在的格式化字符串漏洞。", 
            "-fPIE -pie：生成位置无关可执行文件，增强地址空间布局随机化（ASLR）的效果，增加攻击者利用漏洞的难度。" 
        ], 
        "mitre_mitigation": [ 
            "M1049：限制资源，通过限制用户输入的长度、程序的运行时间和内存使用等资源，减少缓冲区溢出的风险。", 
            "M1022：输入验证，对所有用户输入进行严格的验证和过滤，确保输入数据的合法性和安全性。", 
            "M1036：数据保护，采用数据加密、访问控制等手段保护敏感数据，防止数据泄露。", 
            "M1048：内存保护，使用内存保护机制（如内存访问权限控制、内存隔离等）来防止缓冲区溢出的影响扩散。" 
        ], 
        "example_code_fix": [ 
            { 
                "vulnerable_code": "char buffer[10]; strcpy(buffer, user_input);", 
                "fixed_code": "char buffer[10]; strncpy(buffer, user_input, sizeof(buffer) - 1); buffer[sizeof(buffer) - 1] = '\\0';", 
                "explanation": "原代码使用strcpy函数，它不会检查目标缓冲区的大小，可能导致缓冲区溢出。修改后的代码使用strncpy函数，并手动添加字符串结束符，确保不会超出缓冲区边界。" 
            } 
        ] 
    } 
} 